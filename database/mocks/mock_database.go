// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ochom/sdp-lib/models"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateContact mocks base method.
func (m *MockRepo) CreateContact(ctx context.Context, data *models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockRepoMockRecorder) CreateContact(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockRepo)(nil).CreateContact), ctx, data)
}

// CreateContactGroup mocks base method.
func (m *MockRepo) CreateContactGroup(ctx context.Context, data *models.ContactGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactGroup", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContactGroup indicates an expected call of CreateContactGroup.
func (mr *MockRepoMockRecorder) CreateContactGroup(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactGroup", reflect.TypeOf((*MockRepo)(nil).CreateContactGroup), ctx, data)
}

// CreateOffer mocks base method.
func (m *MockRepo) CreateOffer(ctx context.Context, data *models.Offer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockRepoMockRecorder) CreateOffer(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockRepo)(nil).CreateOffer), ctx, data)
}

// CreateOrganization mocks base method.
func (m *MockRepo) CreateOrganization(ctx context.Context, data *models.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockRepoMockRecorder) CreateOrganization(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockRepo)(nil).CreateOrganization), ctx, data)
}

// CreateSubscriber mocks base method.
func (m *MockRepo) CreateSubscriber(ctx context.Context, data *models.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriber", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscriber indicates an expected call of CreateSubscriber.
func (mr *MockRepoMockRecorder) CreateSubscriber(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriber", reflect.TypeOf((*MockRepo)(nil).CreateSubscriber), ctx, data)
}

// CreateUser mocks base method.
func (m *MockRepo) CreateUser(ctx context.Context, data *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepoMockRecorder) CreateUser(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepo)(nil).CreateUser), ctx, data)
}

// DeleteContact mocks base method.
func (m *MockRepo) DeleteContact(ctx context.Context, query *models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockRepoMockRecorder) DeleteContact(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockRepo)(nil).DeleteContact), ctx, query)
}

// DeleteContactGroup mocks base method.
func (m *MockRepo) DeleteContactGroup(ctx context.Context, query *models.ContactGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactGroup", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContactGroup indicates an expected call of DeleteContactGroup.
func (mr *MockRepoMockRecorder) DeleteContactGroup(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactGroup", reflect.TypeOf((*MockRepo)(nil).DeleteContactGroup), ctx, query)
}

// DeleteOffer mocks base method.
func (m *MockRepo) DeleteOffer(ctx context.Context, query *models.Offer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOffer", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOffer indicates an expected call of DeleteOffer.
func (mr *MockRepoMockRecorder) DeleteOffer(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOffer", reflect.TypeOf((*MockRepo)(nil).DeleteOffer), ctx, query)
}

// DeleteOrganization mocks base method.
func (m *MockRepo) DeleteOrganization(ctx context.Context, query *models.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockRepoMockRecorder) DeleteOrganization(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockRepo)(nil).DeleteOrganization), ctx, query)
}

// DeleteSubscriber mocks base method.
func (m *MockRepo) DeleteSubscriber(ctx context.Context, query *models.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriber", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriber indicates an expected call of DeleteSubscriber.
func (mr *MockRepoMockRecorder) DeleteSubscriber(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriber", reflect.TypeOf((*MockRepo)(nil).DeleteSubscriber), ctx, query)
}

// DeleteUser mocks base method.
func (m *MockRepo) DeleteUser(ctx context.Context, query *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepoMockRecorder) DeleteUser(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepo)(nil).DeleteUser), ctx, query)
}

// GetContact mocks base method.
func (m *MockRepo) GetContact(ctx context.Context, query *models.Contact) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", ctx, query)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockRepoMockRecorder) GetContact(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockRepo)(nil).GetContact), ctx, query)
}

// GetContactGroup mocks base method.
func (m *MockRepo) GetContactGroup(ctx context.Context, query *models.ContactGroup) (*models.ContactGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactGroup", ctx, query)
	ret0, _ := ret[0].(*models.ContactGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactGroup indicates an expected call of GetContactGroup.
func (mr *MockRepoMockRecorder) GetContactGroup(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactGroup", reflect.TypeOf((*MockRepo)(nil).GetContactGroup), ctx, query)
}

// GetContactGroups mocks base method.
func (m *MockRepo) GetContactGroups(ctx context.Context, query *models.ContactGroup) ([]*models.ContactGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactGroups", ctx, query)
	ret0, _ := ret[0].([]*models.ContactGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactGroups indicates an expected call of GetContactGroups.
func (mr *MockRepoMockRecorder) GetContactGroups(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactGroups", reflect.TypeOf((*MockRepo)(nil).GetContactGroups), ctx, query)
}

// GetContacts mocks base method.
func (m *MockRepo) GetContacts(ctx context.Context, query *models.Contact) ([]*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", ctx, query)
	ret0, _ := ret[0].([]*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockRepoMockRecorder) GetContacts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockRepo)(nil).GetContacts), ctx, query)
}

// GetOffer mocks base method.
func (m *MockRepo) GetOffer(ctx context.Context, query *models.Offer) (*models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffer", ctx, query)
	ret0, _ := ret[0].(*models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffer indicates an expected call of GetOffer.
func (mr *MockRepoMockRecorder) GetOffer(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffer", reflect.TypeOf((*MockRepo)(nil).GetOffer), ctx, query)
}

// GetOffers mocks base method.
func (m *MockRepo) GetOffers(ctx context.Context, query *models.Offer) ([]*models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffers", ctx, query)
	ret0, _ := ret[0].([]*models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffers indicates an expected call of GetOffers.
func (mr *MockRepoMockRecorder) GetOffers(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffers", reflect.TypeOf((*MockRepo)(nil).GetOffers), ctx, query)
}

// GetOrganization mocks base method.
func (m *MockRepo) GetOrganization(ctx context.Context, query *models.Organization) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, query)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockRepoMockRecorder) GetOrganization(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockRepo)(nil).GetOrganization), ctx, query)
}

// GetOrganizations mocks base method.
func (m *MockRepo) GetOrganizations(ctx context.Context, query *models.Organization) ([]*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations", ctx, query)
	ret0, _ := ret[0].([]*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockRepoMockRecorder) GetOrganizations(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockRepo)(nil).GetOrganizations), ctx, query)
}

// GetSubscriber mocks base method.
func (m *MockRepo) GetSubscriber(ctx context.Context, query *models.Subscriber) (*models.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriber", ctx, query)
	ret0, _ := ret[0].(*models.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriber indicates an expected call of GetSubscriber.
func (mr *MockRepoMockRecorder) GetSubscriber(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriber", reflect.TypeOf((*MockRepo)(nil).GetSubscriber), ctx, query)
}

// GetSubscribers mocks base method.
func (m *MockRepo) GetSubscribers(ctx context.Context, query *models.Subscriber) ([]*models.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", ctx, query)
	ret0, _ := ret[0].([]*models.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockRepoMockRecorder) GetSubscribers(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockRepo)(nil).GetSubscribers), ctx, query)
}

// GetUser mocks base method.
func (m *MockRepo) GetUser(ctx context.Context, query *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, query)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepoMockRecorder) GetUser(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepo)(nil).GetUser), ctx, query)
}

// GetUsers mocks base method.
func (m *MockRepo) GetUsers(ctx context.Context, query *models.User) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, query)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepoMockRecorder) GetUsers(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepo)(nil).GetUsers), ctx, query)
}

// UpdateContact mocks base method.
func (m *MockRepo) UpdateContact(ctx context.Context, data *models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockRepoMockRecorder) UpdateContact(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockRepo)(nil).UpdateContact), ctx, data)
}

// UpdateContactGroup mocks base method.
func (m *MockRepo) UpdateContactGroup(ctx context.Context, data *models.ContactGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactGroup", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContactGroup indicates an expected call of UpdateContactGroup.
func (mr *MockRepoMockRecorder) UpdateContactGroup(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactGroup", reflect.TypeOf((*MockRepo)(nil).UpdateContactGroup), ctx, data)
}

// UpdateOffer mocks base method.
func (m *MockRepo) UpdateOffer(ctx context.Context, data *models.Offer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockRepoMockRecorder) UpdateOffer(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockRepo)(nil).UpdateOffer), ctx, data)
}

// UpdateOrganization mocks base method.
func (m *MockRepo) UpdateOrganization(ctx context.Context, data *models.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockRepoMockRecorder) UpdateOrganization(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockRepo)(nil).UpdateOrganization), ctx, data)
}

// UpdateUser mocks base method.
func (m *MockRepo) UpdateUser(ctx context.Context, data *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepoMockRecorder) UpdateUser(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepo)(nil).UpdateUser), ctx, data)
}

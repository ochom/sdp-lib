// Code generated by MockGen. DO NOT EDIT.
// Source: database/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ochom/sdp-lib/models"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateSubscriber mocks base method.
func (m *MockRepo) CreateSubscriber(ctx context.Context, data *models.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriber", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscriber indicates an expected call of CreateSubscriber.
func (mr *MockRepoMockRecorder) CreateSubscriber(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriber", reflect.TypeOf((*MockRepo)(nil).CreateSubscriber), ctx, data)
}

// DeleteSubscriber mocks base method.
func (m *MockRepo) DeleteSubscriber(ctx context.Context, query *models.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriber", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriber indicates an expected call of DeleteSubscriber.
func (mr *MockRepoMockRecorder) DeleteSubscriber(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriber", reflect.TypeOf((*MockRepo)(nil).DeleteSubscriber), ctx, query)
}

// GetSubscriber mocks base method.
func (m *MockRepo) GetSubscriber(ctx context.Context, query *models.Subscriber) (*models.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriber", ctx, query)
	ret0, _ := ret[0].(*models.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriber indicates an expected call of GetSubscriber.
func (mr *MockRepoMockRecorder) GetSubscriber(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriber", reflect.TypeOf((*MockRepo)(nil).GetSubscriber), ctx, query)
}

// GetSubscribers mocks base method.
func (m *MockRepo) GetSubscribers(ctx context.Context, query *models.Subscriber) ([]*models.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", ctx, query)
	ret0, _ := ret[0].([]*models.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockRepoMockRecorder) GetSubscribers(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockRepo)(nil).GetSubscribers), ctx, query)
}
